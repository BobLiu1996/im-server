// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-server/internal/data/model"
)

func newTGreeter(db *gorm.DB, opts ...gen.DOOption) tGreeter {
	_tGreeter := tGreeter{}

	_tGreeter.tGreeterDo.UseDB(db, opts...)
	_tGreeter.tGreeterDo.UseModel(&model.TGreeter{})

	tableName := _tGreeter.tGreeterDo.TableName()
	_tGreeter.ALL = field.NewAsterisk(tableName)
	_tGreeter.ID = field.NewUint64(tableName, "id")
	_tGreeter.CreatedAt = field.NewTime(tableName, "created_at")
	_tGreeter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tGreeter.CreatedBy = field.NewUint32(tableName, "created_by")
	_tGreeter.UpdatedBy = field.NewUint32(tableName, "updated_by")
	_tGreeter.Age = field.NewUint32(tableName, "age")
	_tGreeter.Name = field.NewString(tableName, "name")

	_tGreeter.fillFieldMap()

	return _tGreeter
}

// tGreeter 问候者表
type tGreeter struct {
	tGreeterDo tGreeterDo

	ALL       field.Asterisk
	ID        field.Uint64 // 自增ID
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	CreatedBy field.Uint32 // 创建人
	UpdatedBy field.Uint32 // 更新人
	Age       field.Uint32 // 年龄
	Name      field.String // 姓名

	fieldMap map[string]field.Expr
}

func (t tGreeter) Table(newTableName string) *tGreeter {
	t.tGreeterDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tGreeter) As(alias string) *tGreeter {
	t.tGreeterDo.DO = *(t.tGreeterDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tGreeter) updateTableName(table string) *tGreeter {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreatedBy = field.NewUint32(table, "created_by")
	t.UpdatedBy = field.NewUint32(table, "updated_by")
	t.Age = field.NewUint32(table, "age")
	t.Name = field.NewString(table, "name")

	t.fillFieldMap()

	return t
}

func (t *tGreeter) WithContext(ctx context.Context) ITGreeterDo { return t.tGreeterDo.WithContext(ctx) }

func (t tGreeter) TableName() string { return t.tGreeterDo.TableName() }

func (t tGreeter) Alias() string { return t.tGreeterDo.Alias() }

func (t tGreeter) Columns(cols ...field.Expr) gen.Columns { return t.tGreeterDo.Columns(cols...) }

func (t *tGreeter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tGreeter) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["age"] = t.Age
	t.fieldMap["name"] = t.Name
}

func (t tGreeter) clone(db *gorm.DB) tGreeter {
	t.tGreeterDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tGreeter) replaceDB(db *gorm.DB) tGreeter {
	t.tGreeterDo.ReplaceDB(db)
	return t
}

type tGreeterDo struct{ gen.DO }

type ITGreeterDo interface {
	gen.SubQuery
	Debug() ITGreeterDo
	WithContext(ctx context.Context) ITGreeterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITGreeterDo
	WriteDB() ITGreeterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITGreeterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITGreeterDo
	Not(conds ...gen.Condition) ITGreeterDo
	Or(conds ...gen.Condition) ITGreeterDo
	Select(conds ...field.Expr) ITGreeterDo
	Where(conds ...gen.Condition) ITGreeterDo
	Order(conds ...field.Expr) ITGreeterDo
	Distinct(cols ...field.Expr) ITGreeterDo
	Omit(cols ...field.Expr) ITGreeterDo
	Join(table schema.Tabler, on ...field.Expr) ITGreeterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITGreeterDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITGreeterDo
	Group(cols ...field.Expr) ITGreeterDo
	Having(conds ...gen.Condition) ITGreeterDo
	Limit(limit int) ITGreeterDo
	Offset(offset int) ITGreeterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITGreeterDo
	Unscoped() ITGreeterDo
	Create(values ...*model.TGreeter) error
	CreateInBatches(values []*model.TGreeter, batchSize int) error
	Save(values ...*model.TGreeter) error
	First() (*model.TGreeter, error)
	Take() (*model.TGreeter, error)
	Last() (*model.TGreeter, error)
	Find() ([]*model.TGreeter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGreeter, err error)
	FindInBatches(result *[]*model.TGreeter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TGreeter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITGreeterDo
	Assign(attrs ...field.AssignExpr) ITGreeterDo
	Joins(fields ...field.RelationField) ITGreeterDo
	Preload(fields ...field.RelationField) ITGreeterDo
	FirstOrInit() (*model.TGreeter, error)
	FirstOrCreate() (*model.TGreeter, error)
	FindByPage(offset int, limit int) (result []*model.TGreeter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITGreeterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tGreeterDo) Debug() ITGreeterDo {
	return t.withDO(t.DO.Debug())
}

func (t tGreeterDo) WithContext(ctx context.Context) ITGreeterDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tGreeterDo) ReadDB() ITGreeterDo {
	return t.Clauses(dbresolver.Read)
}

func (t tGreeterDo) WriteDB() ITGreeterDo {
	return t.Clauses(dbresolver.Write)
}

func (t tGreeterDo) Session(config *gorm.Session) ITGreeterDo {
	return t.withDO(t.DO.Session(config))
}

func (t tGreeterDo) Clauses(conds ...clause.Expression) ITGreeterDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tGreeterDo) Returning(value interface{}, columns ...string) ITGreeterDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tGreeterDo) Not(conds ...gen.Condition) ITGreeterDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tGreeterDo) Or(conds ...gen.Condition) ITGreeterDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tGreeterDo) Select(conds ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tGreeterDo) Where(conds ...gen.Condition) ITGreeterDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tGreeterDo) Order(conds ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tGreeterDo) Distinct(cols ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tGreeterDo) Omit(cols ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tGreeterDo) Join(table schema.Tabler, on ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tGreeterDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tGreeterDo) RightJoin(table schema.Tabler, on ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tGreeterDo) Group(cols ...field.Expr) ITGreeterDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tGreeterDo) Having(conds ...gen.Condition) ITGreeterDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tGreeterDo) Limit(limit int) ITGreeterDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tGreeterDo) Offset(offset int) ITGreeterDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tGreeterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITGreeterDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tGreeterDo) Unscoped() ITGreeterDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tGreeterDo) Create(values ...*model.TGreeter) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tGreeterDo) CreateInBatches(values []*model.TGreeter, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tGreeterDo) Save(values ...*model.TGreeter) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tGreeterDo) First() (*model.TGreeter, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGreeter), nil
	}
}

func (t tGreeterDo) Take() (*model.TGreeter, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGreeter), nil
	}
}

func (t tGreeterDo) Last() (*model.TGreeter, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGreeter), nil
	}
}

func (t tGreeterDo) Find() ([]*model.TGreeter, error) {
	result, err := t.DO.Find()
	return result.([]*model.TGreeter), err
}

func (t tGreeterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGreeter, err error) {
	buf := make([]*model.TGreeter, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tGreeterDo) FindInBatches(result *[]*model.TGreeter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tGreeterDo) Attrs(attrs ...field.AssignExpr) ITGreeterDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tGreeterDo) Assign(attrs ...field.AssignExpr) ITGreeterDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tGreeterDo) Joins(fields ...field.RelationField) ITGreeterDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tGreeterDo) Preload(fields ...field.RelationField) ITGreeterDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tGreeterDo) FirstOrInit() (*model.TGreeter, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGreeter), nil
	}
}

func (t tGreeterDo) FirstOrCreate() (*model.TGreeter, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGreeter), nil
	}
}

func (t tGreeterDo) FindByPage(offset int, limit int) (result []*model.TGreeter, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tGreeterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tGreeterDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tGreeterDo) Delete(models ...*model.TGreeter) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tGreeterDo) withDO(do gen.Dao) *tGreeterDo {
	t.DO = *do.(*gen.DO)
	return t
}
