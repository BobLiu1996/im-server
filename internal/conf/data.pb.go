// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: data.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mysql         *Data_MySql            `protobuf:"bytes,1,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Redis         *Data_Redis            `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	RepoSelector  string                 `protobuf:"bytes,3,opt,name=repoSelector,proto3" json:"repoSelector,omitempty"`
	Debug         bool                   `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"` //是否开启debug，数据库可以打印sql语句
	LocalCache    *Data_LocalCache       `protobuf:"bytes,5,opt,name=localCache,proto3" json:"localCache,omitempty"`
	RocketMQ      *Data_RocketMQ         `protobuf:"bytes,6,opt,name=rocketMQ,proto3" json:"rocketMQ,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetMysql() *Data_MySql {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetRepoSelector() string {
	if x != nil {
		return x.RepoSelector
	}
	return ""
}

func (x *Data) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Data) GetLocalCache() *Data_LocalCache {
	if x != nil {
		return x.LocalCache
	}
	return nil
}

func (x *Data) GetRocketMQ() *Data_RocketMQ {
	if x != nil {
		return x.RocketMQ
	}
	return nil
}

type Data_MySql struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	MaxConn       int32                  `protobuf:"varint,3,opt,name=max_conn,json=maxConn,proto3" json:"max_conn,omitempty"`
	MaxIdleConn   int32                  `protobuf:"varint,4,opt,name=max_idle_conn,json=maxIdleConn,proto3" json:"max_idle_conn,omitempty"`
	MaxLifetime   *durationpb.Duration   `protobuf:"bytes,5,opt,name=max_lifetime,json=maxLifetime,proto3" json:"max_lifetime,omitempty"`
	BatchSize     int32                  `protobuf:"varint,6,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_MySql) Reset() {
	*x = Data_MySql{}
	mi := &file_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_MySql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_MySql) ProtoMessage() {}

func (x *Data_MySql) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_MySql.ProtoReflect.Descriptor instead.
func (*Data_MySql) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Data_MySql) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_MySql) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Data_MySql) GetMaxConn() int32 {
	if x != nil {
		return x.MaxConn
	}
	return 0
}

func (x *Data_MySql) GetMaxIdleConn() int32 {
	if x != nil {
		return x.MaxIdleConn
	}
	return 0
}

func (x *Data_MySql) GetMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.MaxLifetime
	}
	return nil
}

func (x *Data_MySql) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type Data_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db            int32                  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	Pool          int32                  `protobuf:"varint,5,opt,name=pool,proto3" json:"pool,omitempty"`
	ReadTimeout   *durationpb.Duration   `protobuf:"bytes,6,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout  *durationpb.Duration   `protobuf:"bytes,7,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	IsCluster     bool                   `protobuf:"varint,8,opt,name=is_cluster,json=isCluster,proto3" json:"is_cluster,omitempty"`
	KeyPrefix     string                 `protobuf:"bytes,9,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	mi := &file_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Data_Redis) GetPool() int32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Data_Redis) GetIsCluster() bool {
	if x != nil {
		return x.IsCluster
	}
	return false
}

func (x *Data_Redis) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

type Data_LocalCache struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Expiration      *durationpb.Duration   `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	CleanupInterval *durationpb.Duration   `protobuf:"bytes,6,opt,name=cleanupInterval,proto3" json:"cleanupInterval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Data_LocalCache) Reset() {
	*x = Data_LocalCache{}
	mi := &file_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_LocalCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_LocalCache) ProtoMessage() {}

func (x *Data_LocalCache) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_LocalCache.ProtoReflect.Descriptor instead.
func (*Data_LocalCache) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Data_LocalCache) GetExpiration() *durationpb.Duration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Data_LocalCache) GetCleanupInterval() *durationpb.Duration {
	if x != nil {
		return x.CleanupInterval
	}
	return nil
}

type Data_RocketMQ struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	NameServers   []string                `protobuf:"bytes,1,rep,name=nameServers,proto3" json:"nameServers,omitempty"`
	Producer      *Data_RocketMQ_Producer `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_RocketMQ) Reset() {
	*x = Data_RocketMQ{}
	mi := &file_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RocketMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RocketMQ) ProtoMessage() {}

func (x *Data_RocketMQ) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RocketMQ.ProtoReflect.Descriptor instead.
func (*Data_RocketMQ) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Data_RocketMQ) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *Data_RocketMQ) GetProducer() *Data_RocketMQ_Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

type Data_RocketMQ_Producer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_RocketMQ_Producer) Reset() {
	*x = Data_RocketMQ_Producer{}
	mi := &file_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RocketMQ_Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RocketMQ_Producer) ProtoMessage() {}

func (x *Data_RocketMQ_Producer) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RocketMQ_Producer.ProtoReflect.Descriptor instead.
func (*Data_RocketMQ_Producer) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Data_RocketMQ_Producer) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

var File_data_proto protoreflect.FileDescriptor

const file_data_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"data.proto\x12\x04conf\x1a\x1egoogle/protobuf/duration.proto\"\xa6\b\n" +
	"\x04Data\x12&\n" +
	"\x05mysql\x18\x01 \x01(\v2\x10.conf.Data.MySqlR\x05mysql\x12&\n" +
	"\x05redis\x18\x02 \x01(\v2\x10.conf.Data.RedisR\x05redis\x12\"\n" +
	"\frepoSelector\x18\x03 \x01(\tR\frepoSelector\x12\x14\n" +
	"\x05debug\x18\x04 \x01(\bR\x05debug\x125\n" +
	"\n" +
	"localCache\x18\x05 \x01(\v2\x15.conf.Data.LocalCacheR\n" +
	"localCache\x12/\n" +
	"\brocketMQ\x18\x06 \x01(\v2\x13.conf.Data.RocketMQR\brocketMQ\x1a\xd3\x01\n" +
	"\x05MySql\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x19\n" +
	"\bmax_conn\x18\x03 \x01(\x05R\amaxConn\x12\"\n" +
	"\rmax_idle_conn\x18\x04 \x01(\x05R\vmaxIdleConn\x12<\n" +
	"\fmax_lifetime\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\vmaxLifetime\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x06 \x01(\x05R\tbatchSize\x1a\xb3\x02\n" +
	"\x05Redis\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\x05R\x02db\x12\x12\n" +
	"\x04pool\x18\x05 \x01(\x05R\x04pool\x12<\n" +
	"\fread_timeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x12\x1d\n" +
	"\n" +
	"is_cluster\x18\b \x01(\bR\tisCluster\x12\x1d\n" +
	"\n" +
	"key_prefix\x18\t \x01(\tR\tkeyPrefix\x1a\x8c\x01\n" +
	"\n" +
	"LocalCache\x129\n" +
	"\n" +
	"expiration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"expiration\x12C\n" +
	"\x0fcleanupInterval\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x0fcleanupInterval\x1a\x90\x01\n" +
	"\bRocketMQ\x12 \n" +
	"\vnameServers\x18\x01 \x03(\tR\vnameServers\x128\n" +
	"\bproducer\x18\x02 \x01(\v2\x1c.conf.Data.RocketMQ.ProducerR\bproducer\x1a(\n" +
	"\bProducer\x12\x1c\n" +
	"\tgroupName\x18\x01 \x01(\tR\tgroupNameB\x1eZ\x1cim-server/internal/conf;confb\x06proto3"

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData []byte
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_data_proto_rawDesc), len(file_data_proto_rawDesc)))
	})
	return file_data_proto_rawDescData
}

var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_data_proto_goTypes = []any{
	(*Data)(nil),                   // 0: conf.Data
	(*Data_MySql)(nil),             // 1: conf.Data.MySql
	(*Data_Redis)(nil),             // 2: conf.Data.Redis
	(*Data_LocalCache)(nil),        // 3: conf.Data.LocalCache
	(*Data_RocketMQ)(nil),          // 4: conf.Data.RocketMQ
	(*Data_RocketMQ_Producer)(nil), // 5: conf.Data.RocketMQ.Producer
	(*durationpb.Duration)(nil),    // 6: google.protobuf.Duration
}
var file_data_proto_depIdxs = []int32{
	1,  // 0: conf.Data.mysql:type_name -> conf.Data.MySql
	2,  // 1: conf.Data.redis:type_name -> conf.Data.Redis
	3,  // 2: conf.Data.localCache:type_name -> conf.Data.LocalCache
	4,  // 3: conf.Data.rocketMQ:type_name -> conf.Data.RocketMQ
	6,  // 4: conf.Data.MySql.max_lifetime:type_name -> google.protobuf.Duration
	6,  // 5: conf.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	6,  // 6: conf.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	6,  // 7: conf.Data.LocalCache.expiration:type_name -> google.protobuf.Duration
	6,  // 8: conf.Data.LocalCache.cleanupInterval:type_name -> google.protobuf.Duration
	5,  // 9: conf.Data.RocketMQ.producer:type_name -> conf.Data.RocketMQ.Producer
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_data_proto_rawDesc), len(file_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
