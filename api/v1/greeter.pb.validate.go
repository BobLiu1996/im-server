// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: greeter.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListGreeterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGreeterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGreeterReqMultiError,
// or nil if none found.
func (m *ListGreeterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListGreeterReqMultiError(errors)
	}

	return nil
}

// ListGreeterReqMultiError is an error wrapping multiple validation errors
// returned by ListGreeterReq.ValidateAll() if the designated constraints
// aren't met.
type ListGreeterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterReqMultiError) AllErrors() []error { return m }

// ListGreeterReqValidationError is the validation error returned by
// ListGreeterReq.Validate if the designated constraints aren't met.
type ListGreeterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterReqValidationError) ErrorName() string { return "ListGreeterReqValidationError" }

// Error satisfies the builtin error interface
func (e ListGreeterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterReqValidationError{}

// Validate checks the field values on ListGreeterRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGreeterRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGreeterRspMultiError,
// or nil if none found.
func (m *ListGreeterRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreeterRspValidationError{
					field:  "Ret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreeterRspValidationError{
					field:  "Ret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreeterRspValidationError{
				field:  "Ret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreeterRspValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreeterRspValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreeterRspValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGreeterRspMultiError(errors)
	}

	return nil
}

// ListGreeterRspMultiError is an error wrapping multiple validation errors
// returned by ListGreeterRsp.ValidateAll() if the designated constraints
// aren't met.
type ListGreeterRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterRspMultiError) AllErrors() []error { return m }

// ListGreeterRspValidationError is the validation error returned by
// ListGreeterRsp.Validate if the designated constraints aren't met.
type ListGreeterRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterRspValidationError) ErrorName() string { return "ListGreeterRspValidationError" }

// Error satisfies the builtin error interface
func (e ListGreeterRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterRspValidationError{}

// Validate checks the field values on Greeter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Greeter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Greeter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GreeterMultiError, or nil if none found.
func (m *Greeter) ValidateAll() error {
	return m.validate(true)
}

func (m *Greeter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Age

	if len(errors) > 0 {
		return GreeterMultiError(errors)
	}

	return nil
}

// GreeterMultiError is an error wrapping multiple validation errors returned
// by Greeter.ValidateAll() if the designated constraints aren't met.
type GreeterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterMultiError) AllErrors() []error { return m }

// GreeterValidationError is the validation error returned by Greeter.Validate
// if the designated constraints aren't met.
type GreeterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterValidationError) ErrorName() string { return "GreeterValidationError" }

// Error satisfies the builtin error interface
func (e GreeterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterValidationError{}

// Validate checks the field values on ListGreeterRsp_Body with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreeterRsp_Body) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterRsp_Body with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreeterRsp_BodyMultiError, or nil if none found.
func (m *ListGreeterRsp_Body) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterRsp_Body) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGreeters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterRsp_BodyValidationError{
						field:  fmt.Sprintf("Greeters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterRsp_BodyValidationError{
						field:  fmt.Sprintf("Greeters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterRsp_BodyValidationError{
					field:  fmt.Sprintf("Greeters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGreeterRsp_BodyMultiError(errors)
	}

	return nil
}

// ListGreeterRsp_BodyMultiError is an error wrapping multiple validation
// errors returned by ListGreeterRsp_Body.ValidateAll() if the designated
// constraints aren't met.
type ListGreeterRsp_BodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterRsp_BodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterRsp_BodyMultiError) AllErrors() []error { return m }

// ListGreeterRsp_BodyValidationError is the validation error returned by
// ListGreeterRsp_Body.Validate if the designated constraints aren't met.
type ListGreeterRsp_BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterRsp_BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterRsp_BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterRsp_BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterRsp_BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterRsp_BodyValidationError) ErrorName() string {
	return "ListGreeterRsp_BodyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreeterRsp_BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterRsp_Body.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterRsp_BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterRsp_BodyValidationError{}
