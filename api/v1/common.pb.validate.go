// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRequestMultiError, or
// nil if none found.
func (m *BaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BaseRequestMultiError(errors)
	}

	return nil
}

// BaseRequestMultiError is an error wrapping multiple validation errors
// returned by BaseRequest.ValidateAll() if the designated constraints aren't met.
type BaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRequestMultiError) AllErrors() []error { return m }

// BaseRequestValidationError is the validation error returned by
// BaseRequest.Validate if the designated constraints aren't met.
type BaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRequestValidationError) ErrorName() string { return "BaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e BaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRequestValidationError{}

// Validate checks the field values on BaseResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRespMultiError, or nil
// if none found.
func (m *BaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Msg

	if len(errors) > 0 {
		return BaseRespMultiError(errors)
	}

	return nil
}

// BaseRespMultiError is an error wrapping multiple validation errors returned
// by BaseResp.ValidateAll() if the designated constraints aren't met.
type BaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRespMultiError) AllErrors() []error { return m }

// BaseRespValidationError is the validation error returned by
// BaseResp.Validate if the designated constraints aren't met.
type BaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRespValidationError) ErrorName() string { return "BaseRespValidationError" }

// Error satisfies the builtin error interface
func (e BaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRespValidationError{}

// Validate checks the field values on PageOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageOptionsMultiError, or
// nil if none found.
func (m *PageOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PageOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNo() < 1 {
		err := PageOptionsValidationError{
			field:  "No",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val < 1 || val > 300 {
		err := PageOptionsValidationError{
			field:  "Size",
			reason: "value must be inside range [1, 300]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageOptionsMultiError(errors)
	}

	return nil
}

// PageOptionsMultiError is an error wrapping multiple validation errors
// returned by PageOptions.ValidateAll() if the designated constraints aren't met.
type PageOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageOptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageOptionsMultiError) AllErrors() []error { return m }

// PageOptionsValidationError is the validation error returned by
// PageOptions.Validate if the designated constraints aren't met.
type PageOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageOptionsValidationError) ErrorName() string { return "PageOptionsValidationError" }

// Error satisfies the builtin error interface
func (e PageOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageOptionsValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Ret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Ret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Ret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}
