// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"im-server/internal/biz"
	"im-server/internal/conf"
	"im-server/internal/data"
	"im-server/internal/data/infra/cache/distribute"
	"im-server/internal/data/infra/cache/local"
	"im-server/internal/data/infra/lock/redis"
	"im-server/internal/data/infra/mq"
	"im-server/internal/server"
	"im-server/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, appConfig *conf.AppConfig, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.ProvideGreeterRepo(dataData)
	locker := redis.NewLocker(dataData)
	distributedCacheType := distribute.ProvideGreeterDistributeCache(dataData, locker)
	cacheDistributedCacheType := distribute.ProvideUserDistributeCache(dataData, locker)
	localCache := local.ProvideGreeterLocalCache(confData)
	cacheLocalCache := local.ProvideUserLocalCache(confData)
	messageSender := mq.ProvideRocketMQMessageSender(confData)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, distributedCacheType, cacheDistributedCacheType, localCache, cacheLocalCache, messageSender)
	greeterService := service.NewGreeterService(greeterUsecase)
	grpcServer := server.NewGRPCServer(confServer, greeterService)
	auth := biz.NewAuth(confServer)
	httpServer := server.NewHTTPServer(confServer, auth, greeterService)
	cronService := service.NewCronService()
	cronServerImpl := server.NewCronServer(cronService, locker, appConfig)
	app := newApp(logger, grpcServer, httpServer, cronServerImpl)
	return app, func() {
		cleanup()
	}, nil
}
